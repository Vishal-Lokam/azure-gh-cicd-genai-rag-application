name: Create | Update infrastructure
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_AZUREAD: true
jobs:
  # Test_jq:
  #   name: "Create environment variables using platform.json"
  #   runs-on: "ubuntu-latest"
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     - name: Check JQ
  #       run: jq --version

  #     - name: Set environment variables
  #       run: |
  #         cd ./environment
  #         RESOURCE_GROUP_NAME=$(jq '.resource_group_name' platform.json | tr -d \")
  #         echo "$RESOURCE_GROUP_NAME"

  terraform_plan:
    name: "Terraform Plan"
    runs-on: "ubuntu-latest"
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          cd ./environment 
          SUBSCRIPTION_ID=$(jq '.subscription_id' platform.json | tr -d \")
          KEYVAULT_NAME=$(jq '.keyvault_name' platform.json | tr -d \")
          LOCATION=$(jq '.location' platform.json | tr -d \")
          RESOURCE_GROUP_NAME=$(jq '.resource_group_name' platform.json | tr -d \")

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{secrets.BACKEND_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{secrets.BACKEND_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{secrets.BACKEND_STORAGE_ACCOUNT_CONTAINER_NAME}}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="subscription_id=$SUBSCRIPTION_ID" \
            -var="keyvault_name=KEYVAULT_NAME" \
            -var="location=LOCATION" \
            -var="resource_group_name=RESOURCE_GROUP_NAME" \
            -out=main.tfplan \
          && terraform show main.tfplan

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./infrastructure/main.tfplan

  terraform_apply:
    needs: terraform_plan
    name: Terraform Apply
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true # This environment variable tells the backend to use AzureAD auth rather than trying a create a key. It means we can limit the permissions applied to the storage account and container to least priviledge: https://developer.hashicorp.com/terraform/language/settings/backends/azurerm#use_azuread_auth

    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{secrets.BACKEND_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{secrets.BACKEND_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{secrets.BACKEND_STORAGE_ACCOUNT_CONTAINER_NAME}}"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./infrastructure

      - name: Terraform apply
        run: terraform apply -auto-approve "./main.tfplan"
